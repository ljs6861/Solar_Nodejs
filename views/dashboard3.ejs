<!DOCTYPE HTML>
<html>



<head>
<% include include/mainHeader.ejs %>


<script>
$(document).ready( function(){
	createGauges();
	updateGauges();
	
	setInterval(updateGauges,100);
})
</script>




    <meta charset="utf-8">
	<meta name="viewport" content="width=320" />
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<title>Gauge</title>
	<script type="text/javascript" src="http://d3js.org/d3.v2.min.js"></script>
	<style>
	body {
		font-family:  Helvetica, Arial, sans-serif;
		margin: 32px;
	}

	#power-gauge g.arc {
		fill: steelblue;
	}

	#power-gauge g.pointer {
		fill: #e85116;
		stroke: #b64011;
	}
	
	#power-gauge g.label text {
		text-anchor: middle;
		font-size: 14px;
		font-weight: bold;
		fill: #666;
	}
	
	
	
	</style>
	
	
	
</head>



<body>


<!-- Header -->
	<% include include/pageHeader.ejs %>
	
	
	
	
	
	
		<article>
		<div class="w3-row">
			<br/>
			<button class="w3-button w3-block w3-light-grey" id='curTime'>현재 발전량</button>
			<span class="w3-col m5 l5" id="solar_valueGaugeContainer"></span>
			<br/>
		</div>
		<div class="w3-row w3-center">
		
			
				<span class="w3-col m3 l3" id="solar_valueGaugeContainer"></span>
				
		</div>
		
		
	</article>
	
	
	
	
	
	
	
	
	
	

<div id="power-gauge"></div>
	

	
<script>




var gauge = function(container, configuration) {
	var that = {};
	var config = {
		size						: 200,
		clipWidth					: 200,
		clipHeight					: 110,
		ringInset					: 20,
		ringWidth					: 20,
		
		pointerWidth				: 10,
		pointerTailLength			: 5,
		pointerHeadLengthPercent	: 0.9,
		
		minValue					: 0,
		maxValue					: 500,
		
		minAngle					: -90,
		maxAngle					: 90,
		
		transitionMs				: 750,
		
		majorTicks					: 5,
		labelFormat					: d3.format(',g'),
		labelInset					: 10,
		
		arcColorFn					: d3.interpolateHsl(d3.rgb('#f4020e'), d3.rgb('#22f402'))
	};
	var range = undefined;
	var r = undefined;
	var pointerHeadLength = undefined;
	var value = 0;
	
	var svg = undefined;
	var arc = undefined;
	var scale = undefined;
	var ticks = undefined;
	var tickData = undefined;
	var pointer = undefined;

	var donut = d3.layout.pie();
	
	


	
	
	
	
	function deg2rad(deg) {
		return deg * Math.PI / 180;
	}
	
	function newAngle(d) {
		var ratio = scale(d);
		var newAngle = config.minAngle + (ratio * range);
		return newAngle;
	}
	
	function configure(configuration) {
		var prop = undefined;
		for ( prop in configuration ) {
			config[prop] = configuration[prop];
		}
		
		range = config.maxAngle - config.minAngle;
		r = config.size / 2;
		pointerHeadLength = Math.round(r * config.pointerHeadLengthPercent);

		// a linear scale that maps domain values to a percent from 0..1
		scale = d3.scale.linear()
			.range([0,1])
			.domain([config.minValue, config.maxValue]);
			
		ticks = scale.ticks(config.majorTicks);
		tickData = d3.range(config.majorTicks).map(function() {return 1/config.majorTicks;});
		
		arc = d3.svg.arc()
			.innerRadius(r - config.ringWidth - config.ringInset)
			.outerRadius(r - config.ringInset)
			.startAngle(function(d, i) {
				var ratio = d * i;
				return deg2rad(config.minAngle + (ratio * range));
			})
			.endAngle(function(d, i) {
				var ratio = d * (i+1);
				return deg2rad(config.minAngle + (ratio * range));
			});
	}
	that.configure = configure;
	
	function centerTranslation() {
		return 'translate('+r +','+ r +')';
	}
	
	function isRendered() {
		return (svg !== undefined);
	}
	that.isRendered = isRendered;
	
	function render(newValue) {
		svg = d3.select(container)
			.append('svg:svg')
				.attr('class', 'gauge')
				.attr('width', config.clipWidth)
				.attr('height', config.clipHeight);
		
		var centerTx = centerTranslation();
		
		var arcs = svg.append('g')
				.attr('class', 'arc')
				.attr('transform', centerTx);
		
		arcs.selectAll('path')
				.data(tickData)
			.enter().append('path')
				.attr('fill', function(d, i) {
					return config.arcColorFn(d * i);
				})
				.attr('d', arc);
		
		var lg = svg.append('g')
				.attr('class', 'label')
				.attr('transform', centerTx);
		lg.selectAll('text')
				.data(ticks)
			.enter().append('text')
				.attr('transform', function(d) {
					var ratio = scale(d);
					var newAngle = config.minAngle + (ratio * range);
					return 'rotate(' +newAngle +') translate(0,' +(config.labelInset - r) +')';
				})
				.text(config.labelFormat);

		var lineData = [ [config.pointerWidth / 2, 0], 
						[0, -pointerHeadLength],
						[-(config.pointerWidth / 2), 0],
						[0, config.pointerTailLength],
						[config.pointerWidth / 2, 0] ];
		var pointerLine = d3.svg.line().interpolate('monotone');
		var pg = svg.append('g').data([lineData])
				.attr('class', 'pointer')
				.attr('transform', centerTx);
				
		pointer = pg.append('path')
			.attr('d', pointerLine/*function(d) { return pointerLine(d) +'Z';}*/ )
			.attr('transform', 'rotate(' +config.minAngle +')');
			
		update(newValue === undefined ? 0 : newValue);
	}
	that.render = render;
	
	function update(newValue, newConfiguration) {
		if ( newConfiguration  !== undefined) {
			configure(newConfiguration);
		}
		var ratio = scale(newValue);
		var newAngle = config.minAngle + (ratio * range);
		pointer.transition()
			.duration(config.transitionMs)
			.ease('elastic')
			.attr('transform', 'rotate(' +newAngle +')');
	}
	that.update = update;

	configure(configuration);
	
	return that;
};






</script>

<script>
function onDocumentReady() {
	
	
	
	var powerGauge = gauge('#power-gauge', {
		size: 500,
		clipWidth: 500,
		clipHeight: 300,
		ringWidth: 60,
		maxValue: 500,
		transitionMs: 4000,
	});
	
	powerGauge.render();
	

	
	
	
	function updateReadings() {
		// just pump in random data here...
		powerGauge.update();
		
	
		
	}
	
	// every few seconds update reading values
	updateReadings();
	setInterval(function() {
		updateReadings();
	}, 5 * 1000);
}

if ( !window.isLoaded ) {
	window.addEventListener("load", function() {
		onDocumentReady();
		
	}, false);
} else {
	onDocumentReady();
	
}




</script>
	
	
	
	
	
	
	

	

	
	<article class="w3-padding-15 w3-center">
		<div class="w3-container"><% include info_tview.ejs %></div>
	</article>
	<br/><br/>


</body>



<script>
	var gauges = [];
	var boolCreate = false ;
	function createGauge(name, label, min, max) {
		var config = {
			size : 220,
			label : label,
			min : undefined != min ? min : 0,
			max : undefined != max ? max : 500,
			minorTicks : 5
		}

		var range = config.max - config.min;
		config.yellowZones = [ {
			from : config.min + range * 0.75,
			to : config.min + range * 0.9
		} ];
		config.redZones = [ {
			from : config.min + range * 0.9,
			to : config.max
		} ];

		gauges[name] = new Gauge(name + "GaugeContainer", config);
		gauges[name].render();
		
	}

	function createGauges() {
		createGauge("solar_value", "초미세(0.1): ㎍/㎥", 0, 500);
	
		boolCreate = true;
	}

	// 게이지 다시그리기
	function updateGauges() {
		$.ajax({

			type : 'GET',
			url : '/solar/getlast',
			dataType : 'json',
			success : function(data) {
				if (data) {
					gauges['solar_value'].redraw(data.solar_value);
				
					$(curTime).text(
							data.solar_date + ',' + data.solar_time
									+ ' 발전량 현황');

					// 배경색 초기화
					$(".solar_value").css("background-color", "white");
			
				
					
			
					if (data.solar_value < 200)
						$(".solar_1").css("background-color", "#33FF66");
					else if (data.solar_value < 300)
						$(".solar_2").css("background-color", "#FFFF66");
					else if (data.solar_value < 400)
						$(".solar_3").css("background-color", "#FF6633");
					else
						$(".solar_4").css("background-color", "red");

				}
			}
		})
	}
</script>
<script src="/d3js/d3.min.js"></script>
<script src="/d3js/gauge.js"></script>
</html>
